name: Issue → Jira → Branch

on:
  issues:
    types: [opened]

permissions:
  contents: write     # 브랜치(ref) 생성에 필요
  issues: write       # GH 이슈에 코멘트/라벨 달기
  pull-requests: read

jobs:
  create-jira-and-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout (optional)
        uses: actions/checkout@v4

      - name: Login to Jira
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}       # e.g. https://your-domain.atlassian.net
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}         # Jira 계정 이메일
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}      # Jira API token

      - name: Build Jira summary/description
        id: build
        uses: actions/github-script@v7
        with:
          script: |
            const payload = context.payload.issue
            const title   = payload.title || 'No title'
            const body    = payload.body  || '(no description)'
            // 브랜치 명에 쓸 slug (영문/숫자/-만 남김)
            const slug = title
              .toLowerCase()
              .replace(/[^a-z0-9]+/g,'-')
              .replace(/(^-|-$)/g,'')
              .slice(0, 50) || `issue-${payload.number}`
            core.setOutput('title', title)
            core.setOutput('body',  body)
            core.setOutput('slug',  slug)

      - name: Create Jira issue
        id: jira
        uses: atlassian/gajira-create@v3
        with:
          project: KAN          # 예: ABC
          issuetype: Task                                   # 필요에 맞게 Bug/Story 등
          summary: ${{ steps.build.outputs.title }}
          description: |
            Created from GitHub issue #${{ github.event.issue.number }} in ${{ github.repository }}.

            ----
            Original GH issue body:
            ${{ steps.build.outputs.body }}

      - name: Comment Jira link on GH issue & add label
        uses: actions/github-script@v7
        with:
          script: |
            const jiraKey = '${{ steps.jira.outputs.issue }}'
            const jiraUrl = `${process.env.JIRA_BASE_URL}/browse/${jiraKey}`
            // 코멘트
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `✅ Jira issue created: **${jiraKey}**\n${jiraUrl}`
            })
            // 라벨
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              labels: ['synced-to-jira']
            })
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}

      - name: Get default branch SHA
        id: base
        uses: actions/github-script@v7
        with:
          script: |
            const repo = await github.rest.repos.get({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            const defaultBranch = repo.data.default_branch
            const ref = await github.rest.git.getRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `heads/${defaultBranch}`
            })
            core.setOutput('sha', ref.data.object.sha)
            core.setOutput('default', defaultBranch)

      - name: Create branch from default
        id: branch
        uses: actions/github-script@v7
        with:
          script: |
            const jiraKey = '${{ steps.jira.outputs.issue }}'
            const slug    = '${{ steps.build.outputs.slug }}'
            const baseSha = '${{ steps.base.outputs.sha }}'
            const branch  = `feature/${jiraKey}-${slug}`
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `refs/heads/${branch}`,
                sha: baseSha
              })
              core.setOutput('branch', branch)
            } catch (e) {
              if (e.status === 422) {
                // 이미 존재하면 넘어감
                core.setOutput('branch', branch)
              } else {
                throw e
              }
            }

      - name: Comment created branch on GH issue
        uses: actions/github-script@v7
        with:
          script: |
            const branch = '${{ steps.branch.outputs.branch }}'
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.issue.number,
              body: `🌱 Created branch: \`${branch}\``
            })
