name: TestFlight CI

on:
  push:
    branches: [ "main" ]        # main에 머지되면 배포
  workflow_dispatch:             # 수동 실행도 허용

jobs:
  build-and-upload:
    runs-on: macos-14
    
    env:
      ASC_KEY_ID: ${{ secrets.ASC_KEY_ID }}
      ASC_ISSUER_ID: ${{ secrets.ASC_ISSUER_ID }}
      ASC_API_KEY_BASE64: ${{ secrets.ASC_API_KEY_BASE64 }}
      MATCH_GIT_URL: ${{ secrets.MATCH_GIT_URL }}
      MATCH_GIT_URL_SSH: ${{ secrets.MATCH_GIT_URL_SSH }}
      MATCH_USERNAME: ${{ secrets.MATCH_USERNAME }}
      MATCH_PASSWORD: ${{ secrets.MATCH_PASSWORD }}
      MATCH_KEYCHAIN_PASSWORD: ${{ secrets.MATCH_KEYCHAIN_PASSWORD }}
      MATCH_KEYCHAIN_NAME: "build.keychain"
      MATCH_GIT_BRANCH: "master"

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install gems (fastlane via bundler)
        run: |
          bundle install --path vendor/bundle --jobs 4 --retry 3

      - name: Write App Store Connect API key (.p8)
        run: |
          if [ -z "${ASC_API_KEY_BASE64}" ]; then
            echo "ASC_API_KEY_BASE64 is empty" >&2; exit 1; fi
          echo "$ASC_API_KEY_BASE64" | base64 --decode > "$HOME/AuthKey_${ASC_KEY_ID}.p8"
          chmod 600 "$HOME/AuthKey_${ASC_KEY_ID}.p8"
          ls -l "$HOME/AuthKey_${ASC_KEY_ID}.p8"

      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Ensure Keychain (for match)
        run: |
          security create-keychain -p "$MATCH_KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MATCH_KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -lut 21600 build.keychain

      - name: Install Tuist (via Homebrew)
        run: |
          brew update
          brew tap tuist/tuist
          brew install --formula tuist
          tuist version

      - name: Generate Xcode project with Tuist
        run: |
          tuist generate

      - name: Setup SSH for match repo
        env:
          MATCH_SSH_PRIVATE_KEY: ${{ secrets.MATCH_SSH_PRIVATE_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$MATCH_SSH_PRIVATE_KEY" | base64 --decode > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          # (선택) 연결 확인
          GIT_SSH_COMMAND="ssh -i ~/.ssh/id_rsa" git ls-remote $MATCH_GIT_URL_SSH -h HEAD
    
      - name: Fastlane Beta (Build & Upload)
        run: |
          bundle exec fastlane beta
